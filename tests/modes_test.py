import pytest
from pytest import approx

from energia.library.examples.energy import design_scheduling_materials


@pytest.fixture
def m():
    _m = design_scheduling_materials()
    _m.usd.spend.opt()
    _m.gwp.emit.opt()
    return _m


def _wrap_with_approx(expected, rel=1e-6, abs=1e-9):
    """
    Recursively wrap lists/floats in pytest.approx.
    """
    if isinstance(expected, dict):
        return {k: _wrap_with_approx(v, rel, abs) for k, v in expected.items()}
    elif isinstance(expected, (list, tuple)):
        return approx(expected, rel=rel, abs=abs)
    elif isinstance(expected, (int, float)):
        return approx(expected, rel=rel, abs=abs)
    else:
        return expected


def test_design_scheduling_materials(m):

    expected0 = {
        'consume': [
            1556.111111111111,
            711.7836761083743,
            4.557293377120964,
            0.0,
            9941.934660645868,
            35927.19088669951,
            7000.0,
            700.0,
            0.0,
        ],
        'release': [135.0, 157.5, 180.0, 67.5],
        'emit': [
            43750.01642036126,
            0.0,
            21088358.834504403,
            4312620.954219459,
            7829500.0,
            85567370.0,
            0.0,
        ],
        'spend': [
            6661096.222632731,
            119054438.42364532,
            0.0,
            119054438.42364532,
            14100.775862068964,
            143904600.0,
            23000000.0,
            44695205.71975917,
            110084.83853311438,
            337439525.98043233,
        ],
        'capacity': [
            90.11083743842364,
            90.11083743842364,
            0.0,
            100.0,
            100.0,
            0.0,
            33.26491516146689,
            0.0,
            33.26491516146689,
            29.938423645320196,
        ],
        'x_capacity': [1.0, 1.0],
        'operate': [
            90.11083743842363,
            80.09852216748766,
            50.06157635467981,
            67.5,
            287.7709359605911,
            66.66666666666667,
            88.88888888888889,
            100.0,
            0.0,
            255.55555555555554,
            0.0,
            90.11083743842363,
            80.09852216748766,
            0.0,
            0.0,
            50.06157635467981,
            0.0,
            67.5,
            80.09852216748766,
            207.67241379310343,
            0.0,
            66.66666666666667,
            88.88888888888889,
            0.0,
            0.0,
            100.0,
            0.0,
            0.0,
            88.88888888888889,
            166.66666666666666,
            33.26491516146689,
            21.7775041050903,
            11.487411056376587,
            0.0,
            0.0,
            29.938423645320196,
            0.0,
            0.0,
            29.938423645320196,
            0.0,
        ],
        'invcapacity': [33.26491516146689],
        'x_invcapacity': [1.0],
        'inventory': [55.04241926655719, 21.7775041050903, 33.26491516146689, 0.0, 0.0],
        'produce': [
            0.0,
            90.11083743842363,
            80.09852216748766,
            0.0,
            0.0,
            50.06157635467981,
            0.0,
            67.5,
            90.11083743842363,
            80.09852216748766,
            50.06157635467981,
            67.5,
            0.0,
            66.66666666666667,
            88.88888888888889,
            0.0,
            0.0,
            100.0,
            0.0,
            0.0,
            66.66666666666667,
            88.88888888888889,
            100.0,
            0.0,
            21.7775041050903,
            11.487411056376587,
            0.0,
            0.0,
            0.0,
            0.0,
            29.938423645320196,
            0.0,
        ],
        'expend': [
            228.84147783251225,
            482.942198275862,
            711.7836761083743,
            444.44444444444446,
            1111.6666666666667,
            1556.111111111111,
            21.7775041050903,
            11.487411056376587,
            0.0,
            0.0,
            0.0,
            0.0,
            33.26491516146689,
            0.0,
        ],
        'use': [
            9903.181034482759,
            9903.181034482759,
            35927.19088669951,
            35927.19088669951,
            0.0,
            0.0,
            7000.0,
            7000.0,
            700.0,
            700.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            38.753626163108926,
            4.557293377120964,
            4.557293377120964,
            38.753626163108926,
        ],
    }

    expected1 = {
        'consume': [
            2016.6971450617282,
            820.1944444444445,
            0.0,
            5.135738168724284,
            11033.672518004116,
            39870.0,
            6349.421296296296,
            0.0,
            634.9421296296296,
        ],
        'release': [135.0, 157.5, 180.0, 148.32690329218104],
        'emit': [
            0.0,
            14380.066872427995,
            23404101.24028763,
            4785907.086,
            7101827.719907407,
            0.0,
            62634945.77893518,
            97941161.89200264,
        ],
        'spend': [
            7392560.587062757,
            132120000.0,
            0.0,
            132120000.0,
            15788.888888888889,
            130530133.12499999,
            27211805.555555556,
            134361400.0,
            125915.63786008231,
            431757603.7943673,
        ],
        'capacity': [
            100.0,
            100.0,
            0.0,
            90.7060185185185,
            0.0,
            90.7060185185185,
            37.4871399176955,
            37.4871399176955,
            0.0,
            33.738425925925945,
        ],
        'x_capacity': [1.0, 1.0],
        'operate': [
            100.0,
            88.88888888888889,
            55.55555555555556,
            77.77777777777777,
            322.22222222222223,
            60.47067901234567,
            80.6275720164609,
            90.7060185185185,
            70.54912551440327,
            302.35339506172835,
            0.0,
            100.0,
            0.0,
            88.88888888888889,
            55.55555555555556,
            0.0,
            77.77777777777777,
            0.0,
            133.33333333333334,
            188.88888888888889,
            0.0,
            60.47067901234567,
            0.0,
            80.6275720164609,
            0.0,
            90.7060185185185,
            0.0,
            70.54912551440327,
            0.0,
            302.35339506172835,
            37.4871399176955,
            25.47067901234567,
            12.016460905349831,
            0.0,
            0.0,
            33.738425925925945,
            0.0,
            0.0,
            33.73842592592596,
            0.0,
        ],
        'invcapacity': [100.0],
        'x_invcapacity': [1.0],
        'inventory': [62.95781893004116, 25.47067901234567, 37.4871399176955, 0.0, 0.0],
        'produce': [
            0.0,
            100.0,
            0.0,
            88.88888888888889,
            55.55555555555556,
            0.0,
            77.77777777777777,
            0.0,
            100.0,
            88.88888888888889,
            55.55555555555556,
            77.77777777777777,
            0.0,
            60.47067901234567,
            0.0,
            80.6275720164609,
            0.0,
            90.7060185185185,
            0.0,
            70.54912551440327,
            60.47067901234567,
            80.6275720164609,
            90.7060185185185,
            70.54912551440327,
            25.47067901234567,
            12.016460905349831,
            0.0,
            0.0,
            0.0,
            0.0,
            33.73842592592596,
            0.0,
        ],
        'expend': [
            380.93333333333334,
            439.2611111111111,
            820.1944444444445,
            0.0,
            2016.6971450617282,
            2016.6971450617282,
            25.47067901234567,
            12.016460905349831,
            0.0,
            0.0,
            0.0,
            0.0,
            37.487139917695515,
            0.0,
        ],
        'use': [
            10990.0,
            10990.0,
            39870.0,
            39870.0,
            0.0,
            0.0,
            0.0,
            6349.421296296296,
            0.0,
            0.0,
            6349.421296296296,
            634.9421296296296,
            634.9421296296296,
            5.135738168724284,
            5.135738168724284,
            43.67251800411526,
            43.67251800411526,
            0.0,
            0.0,
            0.0,
        ],
    }

    assert m.solution[0].asdict() == _wrap_with_approx(expected0)
    assert m.solution[1].asdict() == _wrap_with_approx(expected1)
