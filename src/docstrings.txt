Resource
    """Object with resource data that can be consumed (purchased if consumed at a price), discharged (sold if revenue is generated), 
    stored, used or made by process, transported.

    The emission potentials [gwp, odp, acid, eutt, eutf, eutm] can also be provided
    Given that maximum consumption (consume), purchase price, and sell price can vary by location,
    localization can be achieved by providing the consume_localize, purchase_cost_localize, and sell_cost_localize
    at Location level

    Demand needs to be declared at Location

    Args:
        name (str): name of resource. Enter None to randomly assign a name.
        discharge (Union[float, Tuple[float], Theta, bool, 'Big'], optional): if can be discharged or sold. Defaults to None
        sell_cost (Union[float, Tuple[float], Theta], optional): revenue if generated on selling. Defaults to None
        purchase_cost (Union[float, Tuple[float], Theta], optional): purchase price.Defaults to None
        consume (Union[float, Tuple[float], Theta, bool, 'Big'], optional): maximum amount that can be consumed. Defaults to None
        store_max (Union[float, Tuple[float], Theta, bool, 'Big'], optional): maximum amount that can be stored in inventory. Defaults to None
        store_min (float, optional): minimum amount of that is need to setup inventory. Defaults to None
        store_loss (float, optional): amount lost in inventory per time period of the scheduling scale. Defaults to None
        storage_cost: (float, optional): penalty for mainting inventory per time period in the scheduling scale. Defaults to None.
        transport (bool, optional): if can be transported, also determined if mentioned while defining Transport. Defaults to None
        gwp (Union[float, Tuple[float], Theta], optional): global warming potential. Defaults to None.
        odp (Union[float, Tuple[float], Theta], optional): ozone depletion potential. Defaults to None.
        acid (Union[float, Tuple[float], Theta], optional): acidification potential. Defaults to None.
        eutt (Union[float, Tuple[float], Theta], optional): terrestrial eutrophication potential. Defaults to None.
        eutf (Union[float, Tuple[float], Theta], optional): fresh water eutrophication potential. Defaults to None.
        eutm (Union[float, Tuple[float], Theta], optional): marine eutrophication potential. Defaults to None.
        basis (str, optional): unit in which resource is measured. Defaults to None 
        block (Union[str, list, dict], optional): block to which it belong. Convinient to set up integer cuts. Defaults to None
        label (str, optional): used while generating plots. Defaults to None
        citation (str, optional): can provide citations for your data sources. Defaults to None
        ctype (List[Union[ResourceType, Dict[ResourceType, Set['Location']]]], optional): List of resource ctypes. Defaults to None
        aspect (Dict[ResourceParamType, Union[Aspect, Dict['Location', Aspect]]], optional): dict with parameters declared and thier types. Defaults to None.
        ltype (Dict[ResourceParamType, List[Tuple['Location', LocalizationType]]], optional): which parameters are localized at Location. Defaults to None.
        ftype (Dict[ResourceParamType, List[Tuple['Location', Aspect]]], optional): which parameters are provided with factors at Location. Defaults to None
        etype (List[EmissionType], optional): list of emission types defined. Defaults to None
        localizations (Dict[ResourceParamType, List[Tuple['Location', Localization]]], optional): collects localizations when defined at Location. Defaults to None.
        factors (Dict[ResourceParamType, List[Tuple['Location', Data]]], optional): collects factors when defined at Location. Defaults to None.
        emissions (Dict[str, float], optional): collects emission data. Defaults to None.

    Examples:

        [1] A resource that can be consumed is declared by setting a consume 

        >>> Solar = Resource(name='Solar', consume= 100)

        [2] A resource that can be purchase need a price to be set, besides consume.

        >>> Water = Resource(name='H2O', consume= 100, purchase_cost= 20)

        [3] If the resource can be discharged.

        >>> CO2 = Resource(name='CO2', discharge = True)

        [4] If the resource can be sold. A selling price is set along with sell = True.

        >>> Power = Resource(name='Power', discharge = True, sell_cost = 0.2)

        [5] Additional attributes can be added. Note that this resource is only used implicitly in the system. 

        >>> H2 = Resource(name='H2', basis = 'tons', label = 'Hydrogen', block= 'DEC', citation = 'Kakodkar, et. al (2024)')

        [6] A storage resource can be declared here. Or a resource can be given to a storage type Process which generates a stored resource

        >>> Money= Resource(name='Poishe', basis = 'Rupees', store_max= 2, store_min = 0, store_loss = 0.01)

        [7] Uncertainty in resource parameters for selling price, availability, and purchase price can be handled by either:

        1. Providing deterministic dataset for variablity at the Location level 

        OR through:

        2. Multiparameteric programming (mpP). To declare a parameteric variable, either give ranges for data (as tuples )instead of floats
        or insert energiapy.Theta(bounds = (_, _)) in place of the parameter.

        For example, if the availability of water is uncertain:

        >>>  H2 = Resource(name='H2', discharge = True, sell_cost = (0, 10)) 

        or 

        >>> H2 = Resource(name='H2', discharge = True, sell_cost = Theta(bounds = (0, 10)))

        Multiple parameters of a resource can also be uncertain. As shown here, where water has both uncertain availability as well as price.

        >>> Water = Resource(name='H2O', consume= Theta((0, 45)), purchase_cost= Theta((0, 3))) 

        [8] Environmental impact potentials can also be declared for resources

        >>> NaturalGas = Resource(name = 'NG', consume = 1000, gwp = 30, odp = 50, acid = 20, eutt = 5, eutf = 60, eutm = 10)

    """
